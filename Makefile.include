ifeq ($(QUIET),1)
	export AD=@
	MAKEFLAGS += --no-print-directory
else
	export AD=
endif

OS := $(shell uname)

ifeq ($(OS),Darwin)
	ECHO_  := echo -e
	SHELL  := bash
	OPEN   := open
else
	ECHO_  := /bin/echo -e
	OPEN   := xdg-open
endif

KUBOSBASE ?= $(shell dirname "$(lastword $(MAKEFILE_LIST))")
export KUBOSBASE := $(abspath $(KUBOSBASE))
export BOARDBASE := $(KUBOSBASE)/boards
export MCUBASE := $(KUBOSBASE)/mcu
export CPUBASE := $(KUBOSBASE)/cpu

export BOARD := $(shell echo $(strip $(BOARD)) | tr 'A-Z' 'a-z' | tr '-' '_')

# This will cause BOARDDIR, MCUDIR, CPUDIR, MCUPART, MCU and CPU to be set.
include $(BOARDBASE)/$(BOARD).Makefile.include
include $(MCUBASE)/$(MCUPART).Makefile.include

APPLICATION := $(strip $(APPLICATION))

APPDIR ?= $(CURDIR)
APPDIR := $(abspath $(APPDIR))

BINDIRBASE ?= $(APPDIR)/bin
BINDIRBASE := $(abspath $(BINDIRBASE))

BINDIR ?= $(BINDIRBASE)/$(BOARD)
export BINDIR := $(abspath $(BINDIR))

$(shell mkdir -p $(BINDIR))

# OSX fails to create empty archives. Provide a wrapper to catch that error.
ifneq (0, $(shell $(AR) rc $(BINDIR)/empty-archive.a 2> /dev/null; \
					echo $$?; rm -f $(BINDIR)/empty-archive.a 2>&1 > /dev/null))
	AR := $(KUBOSBASE)/build/ar-wrapper $(AR)
endif

# mandatory includes!
MODULES += application_manager
MODULES += messaging
MODULES += mutex
MODULES += peripheral_manager
MODULES += real_time_clock
MODULES += startup_manager
MODULES += system_timer
MODULES += thread_manager

# optional modules
MODULES += command_shell
MODULES += communications
MODULES += ota_update_manager
MODULES += seu
MODULES += watchdog

export MODULES := $(shell echo $($(subst -,_,$(sort $(MODULES))))|tr 'a-z' 'A-Z')
BASELIBS += $(MODULES:%=$(BINDIR)/%.a)

export APPMODULES := $(shell echo $($(subst -,_,$(sort $(APPMODULES))))|tr 'a-z' 'A-Z')
BASELIBS += $(APPMODULES:%=$(BINDIR)/%.a)

include $(KUBOSBASE)/Makefile.cflags

# Build the include search path for the compiler
INCLUDES += -I$(CPUDIR)/include
ifneq ($(CPUFAMILY),)
	INCLUDES += -I$(CPUBASE)/$(CPUFAMILY)/include
endif
INCLUDES += -I$(MCUDIR)/include
ifneq ($(MCUFAMILY),)
	INCLUDES += -I$(MCUBASE)/$(MCUFAMILY)/include
endif
INCLUDES += -I$(KUBOSBASE)/devices/include
INCLUDES += -I$(BOARDDIR)/include
INCLUDES += -I$(KUBOSBASE)/include
export INCLUDES

# Build the list of target directories
DIRS += $(BOARDDIR)
DIRS += $(MCUDIR)
DIRS += $(CPUDIR)
DIRS += $(SUBSYSTEMS:%= $(SUBSYSTEMDIR)/%)
DIRS += $(PERIPHERALS:%= $(PERIPHERALDIR)/%)
DIRS += $(MODULES:%= $(KUBOSBASE)/system/%)
DIRS += $(APPMODULES:%= $(APPDIR)/%)

# make the KUBOS version available to the program
ifeq ($(origin KUBOS_VERSION), undefined)
	GIT_STRING := $(shell git --git-dir="$(KUBOSBASE)/.git" describe --always --abbrev=4 --dirty=-`hostname` 2> /dev/null)
	ifneq (,$(GIT_STRING))
		GIT_BRANCH := $(shell git --git-dir="$(KUBOSBASE)/.git" rev-parse --abbrev-ref HEAD)
		ifeq ($(strip $(GIT_BRANCH)),master)
			KUBOS_VERSION := $(GIT_STRING)
		else
			KUBOS_VERSION := $(GIT_STRING)-$(GIT_BRANCH)
		endif
	else
		KUBOS_VERSION := "UNKNOWN (builddir: $(KUBOSBASE))"
	endif
endif
export KUBOS_VERSION

# the binaries to link
BASELIBS += $(DIRS: $(BINDIR)/$(shell basename %).a)

ELFFILE ?= $(BINDIR)/$(APPLICATION).elf
HEXFILE ?= $(ELFFILE:.elf=.hex)

TOOLCHAIN ?= gnu
export TOOLCHAIN := $(shell echo $(TOOLCHAIN)|tr 'A-Z' 'a-z')
include $(KUBOSBASE)/build/Makefile.include.$(TOOLCHAIN)

# We assume $(LINK) to be gcc-like. Use `LINKFLAGPREFIX :=` for ld-like linker options.
LINKFLAGPREFIX ?= -Wl,

# Static code analysis tools provided by LLVM
ifeq ($(TOOLCHAIN), llvm)
	include $(KUBOSBASE)/Makefile.scan-build
endif

.PHONY: all $(DIRS) clean help

all: ..compiler-check ..build-message $(HEXFILE)

$(DIRS):
	$(AD)$(MAKE) -C $@

$(ELFFILE): $(BASELIBS) $(DIRS)
	$(AD)$(LINK) -nostdlib -o $(ELFFILE) $(LINKFLAGPREFIX)--start-group \
		$(BASELIBS) -lm $(LINKFLAGPREFIX)--end-group \
		$(LINKFLAGPREFIX)-Map=$(BINDIR)/$(APPLICATION).map \
		$(LINKFLAGPREFIX)--cref $(LINKFLAGS)
	$(AD)$(SIZE) $(ELFFILE)

$(HEXFILE): $(ELFFILE)
	$(AD)$(OBJCOPY) $(OFLAGS) $(ELFFILE) $(HEXFILE)

clean:
	rm -rf $(BINDIR)

..compiler-check:
	@command -v $(CC) >/dev/null 2>&1 || \
		{ $(ECHO_) 'Compiler $(CC) is required but not found in PATH.  Aborting.'; \
		exit 1; }

..build-message:
	@$(ECHO_) ''
	@$(ECHO_) 'Building application "$(APPLICATION)" for board "$(BOARD)"'
	@$(ECHO_) 'KubOS version $(KUBOS_VERSION)'
	@$(ECHO_) ''

help:
	@$(MAKE) -qp | sed -ne 's/\(^[a-z][a-z_-]*\):.*/\1/p' | sort | uniq
