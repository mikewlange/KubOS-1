
CFLAGS_LANG ?= -std=c99

# Add `-fno-delete-null-pointer-checks` flag iff the compiler supports it.
# GCC removes moves tests whether `x == NULL`, if previously `x` or even `x->y` was accessed.
# 0x0 might be a sane memory location for embedded systems, so the test must not be removed.
# Right now clang does not use the *delete-null-pointer* optimization, and does not understand the parameter.
# Related issues: #628, #664.
ifeq ($(shell $(CC) -fno-delete-null-pointer-checks -E - 2>/dev/null >/dev/null </dev/null ; echo $$?),0)
  ifeq ($(shell LANG=C $(CC) -fno-delete-null-pointer-checks -E - 2>&1 1>/dev/null </dev/null | grep warning: | grep -- -fno-delete-null-pointer-checks),)
    CFLAGS_OPT += -fno-delete-null-pointer-checks
  endif
endif

# Fast-out on old style function definitions.
# They cause unreadable error compiler errors on missing semicolons.
# Worse yet they hide errors by accepting wildcard argument types.
ifeq ($(shell $(CC) -Wstrict-prototypes -Werror=strict-prototypes -Wold-style-definition -Werror=old-style-definition -E - 2>/dev/null >/dev/null </dev/null ; echo $$?),0)
  # duplicated parameters don't hurt
  CFLAGS += -Wstrict-prototypes -Werror=strict-prototypes -Wold-style-definition -Werror=old-style-definition
endif

# Forbid common symbols to prevent accidental aliasing.
CFLAGS += -fno-common

# No standard libs
CFLAGS += -nostdlib

# Enable all default warnings and fail on warning
CFLAGS += -Wall -Werror

# Set optimization level
CFLAGS += -Os

# Debug mode
ifeq ($(DEBUG),)
  CFLAGS += -g0
  CFLAGS += -DNDEBUG
else
  CFLAGS += -ggdb2
  CFLAGS += -DDEBUG
endif

export CFLAGS

# Default ARFLAGS for platforms which do not specify it.
# Note: make by default provides ARFLAGS=rv which we want to override
ifeq ($(origin ARFLAGS),default)
  ARFLAGS = rcs
endif

export ARFLAGS
